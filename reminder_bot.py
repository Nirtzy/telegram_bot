from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import asyncio
import os
from dotenv import load_dotenv
import random
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")  # Load your token securely

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã Hi! I'm your Reminder Bot. Use /remind <seconds> <message> to set a reminder.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Use this format:\n/remind 10 Take a break")

async def remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        seconds = int(context.args[0])
        message = " ".join(context.args[1:])
        await update.message.reply_text(f"‚úÖ Reminder set! I'll remind you in {seconds} seconds.")

        await asyncio.sleep(seconds)
        await update.message.reply_text(f"üîî Reminder: {message}")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùó Use this format: /remind 10 Take a break")

INTERVIEW_QUESTIONS = [
    "What is a list comprehension in Python?",
    "Explain the difference between a list and a tuple.",
    "What is an API?",
    "Describe the concept of Object-Oriented Programming.",
    "What is a foreign key in SQL?",
    "Explain the difference between a stack and a queue.",
    "What is version control and why is it important?",
    "How do you handle errors in Python?",
    "What is the purpose of the 'self' keyword in Python classes?",
    "What is normalization in databases?"
]

async def question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question_text = random.choice(INTERVIEW_QUESTIONS)
    await update.message.reply_text(f"\U0001F4AC Interview Question:\n\n{question_text}")

VOCABULARY = {
    "API": {
        "en": "A set of functions and protocols that allow different software applications to communicate with each other.",
        "ru": "–ù–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, –ø–æ–∑–≤–æ–ª—è—é—â–∏—Ö —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º."
    },
    "OOP": {
        "en": "Object-Oriented Programming, a programming paradigm based on the concept of objects.",
        "ru": "–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–∞—Ä–∞–¥–∏–≥–º–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤."
    },
    "List Comprehension": {
        "en": "A concise way to create lists in Python using a single line of code.",
        "ru": "–ö—Ä–∞—Ç–∫–∏–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –≤ Python –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ–¥–∞."
    },
    "Tuple": {
        "en": "An immutable sequence type in Python.",
        "ru": "–ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π —Ç–∏–ø –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ Python."
    },
    "Foreign Key": {
        "en": "A field in a database table that creates a relationship between two tables.",
        "ru": "–ü–æ–ª–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞—é—â–µ–µ —Å–≤—è–∑—å –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–∞–±–ª–∏—Ü–∞–º–∏."
    },
    "Stack": {
        "en": "A data structure that follows Last-In-First-Out (LIFO) principle.",
        "ru": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, —Ä–∞–±–æ—Ç–∞—é—â–∞—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É LIFO (–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏—à—ë–ª ‚Äî –ø–µ—Ä–≤—ã–π —É—à—ë–ª)."
    },
    "Queue": {
        "en": "A data structure that follows First-In-First-Out (FIFO) principle.",
        "ru": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, —Ä–∞–±–æ—Ç–∞—é—â–∞—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É FIFO (–ø–µ—Ä–≤—ã–π –ø—Ä–∏—à—ë–ª ‚Äî –ø–µ—Ä–≤—ã–π —É—à—ë–ª)."
    },
    "Normalization": {
        "en": "The process of organizing data in a database to reduce redundancy.",
        "ru": "–ü—Ä–æ—Ü–µ—Å—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏."
    },
    "Version Control": {
        "en": "A system that records changes to files over time so you can recall specific versions later.",
        "ru": "–°–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏."
    },
    "Exception Handling": {
        "en": "A way to handle errors or exceptions in a program gracefully.",
        "ru": "–°–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –±–µ–∑ –µ—ë –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
    }
}

async def vocab(update: Update, context: ContextTypes.DEFAULT_TYPE):
    term, defs = random.choice(list(VOCABULARY.items()))
    await update.message.reply_text(
        f"\U0001F4D6 {term}:\n{defs['en']}\n\nüá∑üá∫ {defs['ru']}"
    )

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("remind", remind))
    app.add_handler(CommandHandler("question", question))
    app.add_handler(CommandHandler("vocab", vocab))

    print("ü§ñ Bot is running...")
    app.run_polling()

if __name__ == '__main__':
    main()